// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*) FROM products
`

func (q *Queries) CountProducts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countProductsBySearch = `-- name: CountProductsBySearch :one
SELECT COUNT(*) FROM products
WHERE name ILIKE $1
`

func (q *Queries) CountProductsBySearch(ctx context.Context, searchQuery string) (int64, error) {
	row := q.db.QueryRow(ctx, countProductsBySearch, searchQuery)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    id,
    name,
    price
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, name, price, created_at, updated_at
`

type CreateProductParams struct {
	ID    uuid.UUID      `json:"id"`
	Name  string         `json:"name"`
	Price pgtype.Numeric `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.ID, arg.Name, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getAveragePrice = `-- name: GetAveragePrice :one
SELECT COALESCE(AVG(price), 0) FROM products
`

func (q *Queries) GetAveragePrice(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRow(ctx, getAveragePrice)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const getMaxPrice = `-- name: GetMaxPrice :one
SELECT COALESCE(MAX(price), 0) FROM products
`

func (q *Queries) GetMaxPrice(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRow(ctx, getMaxPrice)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const getMinPrice = `-- name: GetMinPrice :one
SELECT COALESCE(MIN(price), 0) FROM products
`

func (q *Queries) GetMinPrice(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRow(ctx, getMinPrice)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, price, created_at, updated_at FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, price, created_at, updated_at FROM products
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByPriceRange = `-- name: ListProductsByPriceRange :many
SELECT id, name, price, created_at, updated_at FROM products
WHERE price BETWEEN $3 AND $4
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type ListProductsByPriceRangeParams struct {
	Limit    int32          `json:"limit"`
	Offset   int32          `json:"offset"`
	MinPrice pgtype.Numeric `json:"min_price"`
	MaxPrice pgtype.Numeric `json:"max_price"`
}

func (q *Queries) ListProductsByPriceRange(ctx context.Context, arg ListProductsByPriceRangeParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProductsByPriceRange,
		arg.Limit,
		arg.Offset,
		arg.MinPrice,
		arg.MaxPrice,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProducts = `-- name: SearchProducts :many
SELECT id, name, price, created_at, updated_at FROM products
WHERE name ILIKE $3
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type SearchProductsParams struct {
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
	SearchQuery string `json:"search_query"`
}

func (q *Queries) SearchProducts(ctx context.Context, arg SearchProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, searchProducts, arg.Limit, arg.Offset, arg.SearchQuery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProductsWithPriceRange = `-- name: SearchProductsWithPriceRange :many
SELECT id, name, price, created_at, updated_at FROM products
WHERE name ILIKE $3 AND price BETWEEN $4 AND $5
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type SearchProductsWithPriceRangeParams struct {
	Limit       int32          `json:"limit"`
	Offset      int32          `json:"offset"`
	SearchQuery string         `json:"search_query"`
	MinPrice    pgtype.Numeric `json:"min_price"`
	MaxPrice    pgtype.Numeric `json:"max_price"`
}

func (q *Queries) SearchProductsWithPriceRange(ctx context.Context, arg SearchProductsWithPriceRangeParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, searchProductsWithPriceRange,
		arg.Limit,
		arg.Offset,
		arg.SearchQuery,
		arg.MinPrice,
		arg.MaxPrice,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET 
    name = $1,
    price = $2,
    updated_at = NOW()
WHERE id = $3
RETURNING id, name, price, created_at, updated_at
`

type UpdateProductParams struct {
	Name  string         `json:"name"`
	Price pgtype.Numeric `json:"price"`
	ID    uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct, arg.Name, arg.Price, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
